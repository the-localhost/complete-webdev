ES6 (few additions are listed)
```
~ for-of loop: iterates over only iterables (arrays, strings in JS)
	Code:	
			const list = ["color", "brush", "sheet"];
			for (item of list) {
				console.log(item);
			}
	Output:
			color
			brush
			sheet
-------------------------------------------------------------------
~ for-in loop: enumerates over object's properties (arrays are a type of object)
	Code:
			const quantities = {
				color: 5,
				brush: 2,
				sheet: 8
			}
			for (item in quantities) {
				console.log(item);
			}
	Output:
			color
			brush
			sheet
	Code:
			const list = ["color", "brush", "sheet"];
			for (item in list) {
				console.log(item);
			}
	Output:
			0
			1
			2
====================================================================
ES7
```
~ .includes:
	"Jonathon".includes("John") 				// true
	["Hello", "Hi", "Bye"].includes("Hey")		// false
-------------------------------------------------------------------
~ ** (raised to the power of)
	4**3		// 64
	2**10		// 1024
====================================================================
ES8
```
~ .padStart(), .padEnd()
	"Turtle".padStart(6)			// "      Turtle"
	"Turtle".padEnd(6)				// "Turtle      "
-------------------------------------------------------------------
~ comma after list of parameters don't throw error
	function abc(param1, param2, param3,){
		...
	}
-------------------------------------------------------------------
~ Object.values, Object.entries		(earlier, only Object.keys)
	let obj = {
		username: "Rudolf",
		password: "123",
		location: "California"
	};

	Object.keys(obj).forEach((key, index) => {
		console.log(key, obj[key]);
	});
	/*	OUTPUT
	username Rudolf
	password 123
	location California
	*/

	Object.values(obj).forEach(value => {
		console.log(value);
	});
	/*	OUTPUT
	Rudolf
	123
	California
	*/

	Object.entries(obj).forEach(entry => {
		console.log(entry);
	});
	/* OUTPUT
	["username", "Rudolf"]
	["password", "123"]
	["location", "California"]
	*/
====================================================================
ES9
```
====================================================================
ES10
````
~ .flat(level=1): 
	-> flattens a multidimensional array to a given depth level (default 1)
		[1,[2,3],[4,5]].flat()			// [1,2,3,4,5]
		[1,2,[3,4,[5]]].flat()			// [1,2,3,4,[5]]
		[1,2,[3,4,[5]]].flat(2)			// [1,2,3,4,5]
	-> cleans up the array with empty entries
		['bob', 'sally', , , , , , , 'cindy'].flat()	// ['bob', 'sally', 'cindy']
-------------------------------------------------------------------
~ .flatMap() : applies map() followed by flat(1)
	[1,2,3,4].flatMap(x => [x * 2])		// [2, 4, 6, 8]
-------------------------------------------------------------------
~ .trimStart(), .trimEnd()
	"      Hello!".trimStart()		// "Hello!"
	"Amazing!      ".trimEnd()		// "Amazing!"
-------------------------------------------------------------------
~ .fromEntries(entries): creates an object from entries array
	-> Object.fromEntries([['maya', 24], ['helen'], 26]) 	// {maya: 24, helen: 26}
	-> let obj = {user: "Angel", age: "25"}
	   Object.fromEntries(Object.entries(obj))				// {user: "Angel", age: "25"}
-------------------------------------------------------------------
~ try-catch
	try{
		console.log(bob);	// bob is not defined
	} catch {
		console.log("There is an error");
	}
	// Output: There is an error
====================================================================
ES2020
``````
~ BigInt: 
	-> Numbers have a max safe value; above that we need to use BigInt
	-> An 'n' is suffixed after the number to make it BigInt
			- typeof 1n						// bigint
			- Number.MAX_SAFE_INTEGER		// 9007099254740991 (= (2^53)-1)
			- 9007099254740991 + 10			// 9007199254741000 (WRONG!)
			- 9007099254740991n + 10n		// 9007099254741001n
-------------------------------------------------------------------
~ Optional Chaining Operator (?.)
			let users = [
				{
					username: "John",
					address: {
						city: "California",
						PIN: 444304
					}
				},
				{
					username: "Sally",
					address: {
						city: "San Diego",
					}
				},
				undefined,
				{
					username: "Arthur"
				}
			];

	-> to find PIN address of all users (for whomever is available): 
			let pins = [];
			users.forEach(user => {
				if(user && user.address && user.address.PIN){		// Observe this line
					pins.push(user.address.PIN);
				}
			});
			console.log(pins);							// [444304]
	-> using Optional Chaining Operator (?.):
			let pins2 = [];
			users.forEach(user => {
				if(user?.address?.PIN) {				// easy to write & read
					pins2.push(user.address.PIN);	
				}
			});
			console.log(pins2);							// [444304]